<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="chrome://global/skin/" type="text/css"?><?xml-stylesheet href="takahashi.css" type="text/css"?><page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" id="presentation" xmlns:html="http:/www.w3.org/1999/xhtml" orient="vertical" onkeypress="Presentation.onKeyPress(event);">
<html:textarea id="builtinCode" style="visibility: collapse"><![CDATA[
Moose
----
A Postmodern
Object System
for Perl 5
----
Stevan Little
stevan@cpan.org
http://moose.perl.org/
----
What is
Moose?
----
What is
Class::MOP?
----
What is
a MOP??
----
Meta
Object
Protocol
----
CLOS
----
20 year old
LISP
technology
----
Formalization
of the
object system
----
How
classes
work
----
How
methods
work
----
How objects
are created
... etc.
----
Class::MOP
is CLOS for
Perl 5
----
Class::MOP
is a
formalization
of Perl 5 OO
----
Clarity &
Structure
----
Class::MOP is
a platform for
----
Moose
----
  package Person;
  use Moose;

  has name => (is => 'rw');
  has age  => (is => 'rw');

  1;
----
turns on
strict &
warnings
----
Moose::Object
in the @ISA
----
`has` creates
accessor
called 'name'
----
`has` creates
accessor
called 'age'
----
*lots*
of class
metadata
----
  package Person;
  use Moose;

  has name => (is => 'rw');
  has age  => (is => 'rw');

  1;
----
Types
----
  has name => (
    is       => 'rw',
    isa      => 'Str',
    required => 1
  );
----
  has age => (
      is      => 'rw',
      isa     => 'DateTime::Duration',
      lazy    => 1,
      default => sub { 
        DateTime::Duration->new 
      }
  ); 
----
Custom
Types
----
  use Moose::Util::TypeConstraints;
----
  subtype 'NonEmptyStr' 
      => as 'Str' 
      => where { length $_ > 0 };
----
  has name => (
      is       => 'rw',
      isa      => 'NonEmptyStr',
      required => 1
  );    
----
  my $me = Person->new(
      name => 'Stevan',
      age  => DateTime::Duration->new(
          years => 34
      )
  ); 
----
  my $me = Person->new; # BOOM! name is required
----
  my $me = Person->new(
      name => 'Stevan',
      age  => 34
  ); # BOOM! age should be DateTime::Duration
----
Coercions
----
  class_type 'DateTime::Duration';
  coerce 'DateTime::Duration'
      => from 'Int'
        => via { 
            DateTime::Duration->new(
                years => $_
            ) 
        };
----
  has age => (
      is      => 'rw',
      isa     => 'DateTime::Duration',
      coerce  => 1,      
      lazy    => 1,
      default => sub { 
        DateTime::Duration->new 
      }
  );
----
  my $me = Person->new(
      name => 'Stevan',
      age  => 34
  );
----
  coerce 'DateTime::Duration'
      => from 'Int'
        => via { 
            DateTime::Duration->new(
                years => $_
            ) 
        }
      => from 'HashRef'
        => via { 
            DateTime::Duration->new(%$_) 
        };
----
  my $me = Person->new(
      name => 'Stevan',
      age  => { years => 34, months => 11 }
  );
----
  my $me = Person->new(
      name => 'Stevan',
      age  => { years => 34, months => 11 }
  );
  
  $me->name # 'Stevan'
  $me->age  # DateTime::Duration object 
----
  $me->name('Xoe');
  
  $me->age(11);
  
  $me->age({ years => 11, months => 8 }); 
  
  $me->age(DateTime::Duration->new({ 
      years  => 11, 
      months => 8 
  })); 
----
Delegation
----
  has age => (
      is      => 'rw',
      isa     => 'DateTime::Duration',
      coerce  => 1,      
      lazy    => 1,
      default => sub { 
        DateTime::Duration->new 
      },
      handles => {
        'years_old' => 'years'
      }
  );   
----
  $me->years_old # 34
----
Unconventional
Delegation
----
  package Conference;
  use Moose;
  use MooseX::AttributeHelpers;
     
  has attendees => (
      metaclass => 'Collection::Array',
      is        => 'rw',
      isa       => 'ArrayRef[Person]',
      provides => {
          push  => 'add_attendee',
          count => 'number_of_attendees',
      },
  );
----
  my $oscon = Conference->new(
      attendees => [ $me, @all_you_guys ]
  );
  
  $oscon->number_of_attendees; # lots of people
  $oscon->add_attendee($some_slacker); # add a late comer
----
Method Modifiers
----
  before 'add_attendee' => sub {
      my ($self, $attendee) = @_;
      $self->setup_more_chairs(1);
  };
----
  after 'add_attendee' => sub {
      my ($self, $attendee) = @_;
      $self->log("Attendee " . $attendee->name . " added");
  };  
----
   around 'add_attendee' => sub { 
       my ($next, $self, @args) = @_;
       ...
       my @return = $self->$next(@args);
       ...
       return @return;
   };
----
Roles
----
≠
----
Classes
----
Roles
do /not/
inherit.
----
Inheritance is
↕
vertical reuse.
----
Roles
compose.
----
Composition is
↔
horizontal reuse.
----
...
----
When
to use
Roles
----
My general rule 
of thumb is ...
----
s/MI/Roles/g
----
When 
to /not/ use 
Roles
----
When a class 
just makes 
more sense.
----
Roles are /not/ a
replacement for
inheritance.
----
How Roles 
Work
----
Roles are
orphans.
----
Roles are 
composed.
----
Local class
overrides role.
----
Role overrides 
inherited class.
----
Roles can 
conflict.
----
Method conflicts
must be 
disambiguated.
----
Attribute conflicts
cannot be 
disambiguated.
----
  package Age;
  use Moose::Role;
  
  # ... all that type stuff
  
  has age => (
      is      => 'rw',
      isa     => 'DateTime::Duration',
      coerce  => 1,      
      lazy    => 1,
      default => sub { 
        DateTime::Duration->new 
      },
      handles => {
        'years_old' => 'years'
      }
  );
  
  1;
----
   package Person;
   use Moose;
   
   with 'Age';
   
   # ...
----
Conclusion
----
Moose code is shorter
----
less code == less bugs
----
Less testing
----
Moose/Class::MOP 
have +5400 
tests and growing
----
Why test, when 
Moose already does.
----
More Readable
----
]]></html:textarea>

<deck flex="1" id="deck">

<vbox flex="1"
	onmousemove="Presentation.onMouseMoveOnCanvas(event);">
	<toolbox id="canvasToolbar">
		<toolbar>
			<toolbarbutton oncommand="Presentation.home()" label="|&lt;&lt;"
				observes="canBack"/>
			<toolbarbutton oncommand="Presentation.back()" label="&lt;"
				observes="canBack"/>
			<toolbarbutton oncommand="Presentation.forward()" label="&gt;"
				observes="canForward"/>
			<toolbarbutton oncommand="Presentation.end()" label="&gt;&gt;|"
				observes="canForward"/>
			<toolbarseparator/>
			<hbox align="center">
				<textbox id="current_page" size="4"
					oninput="if (this.value) Presentation.showPage(parseInt(this.value)-1);"/>
				<description value="/"/>
				<description id="max_page"/>
			</hbox>
			<toolbarseparator/>
			<vbox flex="2">
				<spacer flex="1"/>
				<scrollbar id="scroller"
					align="center" orient="horizontal"
					oncommand="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));"
					onclick="Presentation.showPage(parseInt(event.target.getAttribute('curpos')));"
					onmousedown="Presentation.onScrollerDragStart();"
					onmousemove="Presentation.onScrollerDragMove();"
					onmouseup="Presentation.onScrollerDragDrop();"/>
				<spacer flex="1"/>
			</vbox>
			<toolbarseparator/>
			<spacer flex="1"/>
			<toolbarseparator/>
			<toolbarbutton id="toggleEva" label="Eva"
				type="checkbox"
				autoCheck="false"
				oncommand="Presentation.toggleEvaMode();"/>
			<toolbarseparator/>
			<toolbarbutton label="Edit"
				oncommand="Presentation.toggleEditMode();"/>
			<toolbarbutton oncommand="Presentation.reload();" label="Reload"/>
		</toolbar>
	</toolbox>
	<vbox flex="1" id="canvas"
		onclick="Presentation.onPresentationClick(event);">
		<spacer flex="1"/>
		<hbox flex="1">
			<spacer flex="1"/>
			<vbox id="content"/>
			<spacer flex="1"/>
		</hbox>
		<spacer flex="1"/>
	</vbox>
</vbox>


<vbox flex="1" id="edit">
	<toolbox>
		<toolbar>
			<toolbarbutton label="New Page"
				oncommand="Presentation.addPage()"/>
			<spacer flex="1"/>
			<toolbarseparator/>
			<toolbarbutton label="View"
				oncommand="Presentation.toggleEditMode();"/>
			<toolbarbutton oncommand="Presentation.reload();" label="Reload"/>
		</toolbar>
	</toolbox>
	<textbox id="textField" flex="1" multiline="true"
		oninput="Presentation.onEdit()"/>
	<hbox collapsed="true">
		<iframe id="dataLoader" onload="if (window.Presentation) Presentation.onDataLoad();"/>
	</hbox>
</vbox>

</deck>


<broadcasterset>
	<broadcaster id="canBack"/>
	<broadcaster id="canForward"/>
</broadcasterset>

<commandset>
	<command id="cmd_forward"
		oncommand="if (Presentation.isPresentationMode) Presentation.forward();"/>
	<command id="cmd_back"
		oncommand="if (Presentation.isPresentationMode) Presentation.back();"/>
	<command id="cmd_home"
		oncommand="if (Presentation.isPresentationMode) Presentation.home();"/>
	<command id="cmd_end"
		oncommand="if (Presentation.isPresentationMode) Presentation.end();"/>
</commandset>
<keyset>
	<key keycode="VK_ENTER"      command="cmd_forward"/>
	<key keycode="VK_RETURN"     command="cmd_forward"/>
	<key keycode="VK_PAGE_DOWN"  command="cmd_forward"/>
	<key keycode="VK_RIGHT"      command="cmd_forward"/>
	<key keycode="VK_DOWN"       command="cmd_forward"/>
	<!-- key keycode="VK_BACK_SPACE" command="cmd_back"/-->
	<key keycode="VK_PAGE_UP"    command="cmd_back"/>
        <!-- <key keycode="VK_BACK_UP"    command="cmd_back"/>-->
        <!-- <key keycode="VK_BACK_LEFT"  command="cmd_back"/>-->
	<key keycode="VK_HOME"       command="cmd_home"/>
	<key keycode="VK_END"        command="cmd_end"/>
	<key key="n" modifiers="accel" oncommand="Presentation.addPage();"/>
	<key key="r" modifiers="accel" oncommand="window.location.reload();"/>
	<key key="e" modifiers="accel" oncommand="Presentation.toggleEditMode();"/>
	<key key="a" modifiers="accel" oncommand="Presentation.toggleEvaMode();"/>
</keyset>


<script src="takahashi.js" type="application/x-javascript" />
</page>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Takahashi-Method-based Presentation Tool in XUL.
   -
   - The Initial Developer of the Original Code is SHIMODA Hiroshi.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): SHIMODA Hiroshi <piro@p.club.ne.jp>
   -
   - ***** END LICENSE BLOCK ***** -->


